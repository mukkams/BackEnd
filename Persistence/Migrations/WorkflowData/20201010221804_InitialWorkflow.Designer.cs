// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations.WorkflowData
{
    [DbContext(typeof(WorkflowDataContext))]
    [Migration("20201010221804_InitialWorkflow")]
    partial class InitialWorkflow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.UserStore.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Models.UserStore.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Domain.Models.UserStore.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ByUserHierarchy")
                        .HasColumnType("int");

                    b.Property<bool>("CanReloadWorkItem")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EditScreenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnterEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExitEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ViewScreenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WFActivityScreenNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WFActivityScreenNameId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WFEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WFEventId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WFProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WFActivityScreenNameId");

                    b.HasIndex("WFActivityScreenNameId1");

                    b.HasIndex("WFEventId");

                    b.HasIndex("WFEventId1");

                    b.HasIndex("WFProcessTypeId");

                    b.ToTable("WFActivity");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("WFActivityPermission");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityScreenName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTypeId");

                    b.ToTable("WFActivityScreenName");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ActivityIdFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityIdFromNavigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityIdTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityIdToNavigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransitionEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityIdFromNavigationId");

                    b.HasIndex("ActivityIdToNavigationId");

                    b.HasIndex("TransitionEventId");

                    b.ToTable("WFActivityTransition");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityTransitionEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityTransitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHtmlbody")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WFActivityTransitionEmail");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFApplicationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfapplicationType");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MessageToReviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageToUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeverityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SeverityId");

                    b.ToTable("WfbusinessRule");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfbusinessRuleClass");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRuleId");

                    b.HasIndex("EventId");

                    b.ToTable("WfbusinessRuleEvent");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRuleId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfbusinessRuleMessage");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleReviewMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessRuleMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRuleMessageId");

                    b.ToTable("WfbusinessRuleReviewMessage");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleSeverity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfbusinessRuleSeverity");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEmailClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfemailClass");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEmailDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("WfemailDefinition");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEmailEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WfemailDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("WfemailDefinitionId");

                    b.ToTable("WfemailEvent");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Wfevent");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFLineBasedRuleMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRuleId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WflineBasedRuleMessage");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFPreprocessorClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfpreprocessorClass");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EndActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Islocked")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StartActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("EndActivityId");

                    b.HasIndex("StartActivityId");

                    b.ToTable("WfprocessType");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessTypeAutoListedBrule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("WfprocessTypeAutoListedBrule");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessTypePreprocessor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RunBeforeFileLoad")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("WfprocessTypePreprocessor");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFSendEmailNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityTransitionEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHtmlbody")
                        .HasColumnType("bit");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WfsendEmailNotification");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFUploadAmendmentTemplates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WfuploadAmendmentTemplates");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AsOfDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LockByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReuploadedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReuploadedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkItemType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("WfworkItem");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemAttachDocRevMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemAttachDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemAttachDocumentId");

                    b.ToTable("WfworkItemAttachDocRevMessage");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemAttachedDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemAttachedDocument");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemLockTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LockByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemLockTrail");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemLog");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ActivityTransitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTransitionId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemTrail");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemUploadTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemUploadTrail");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemVersionMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WfworkItemVersionMap");
                });

            modelBuilder.Entity("Domain.Models.UserStore.Address", b =>
                {
                    b.HasOne("Domain.Models.UserStore.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Models.UserStore.Email", b =>
                {
                    b.HasOne("Domain.Models.UserStore.User", null)
                        .WithMany("EmailAddress")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivity", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFActivityScreenName", null)
                        .WithMany("WFActivityEditScreen")
                        .HasForeignKey("WFActivityScreenNameId");

                    b.HasOne("Domain.Models.Workflow.WFActivityScreenName", null)
                        .WithMany("WFActivityViewScreen")
                        .HasForeignKey("WFActivityScreenNameId1");

                    b.HasOne("Domain.Models.Workflow.WFEvent", null)
                        .WithMany("WFActivityEnterEvent")
                        .HasForeignKey("WFEventId");

                    b.HasOne("Domain.Models.Workflow.WFEvent", null)
                        .WithMany("WFActivityExitEvent")
                        .HasForeignKey("WFEventId1");

                    b.HasOne("Domain.Models.Workflow.WFProcessType", null)
                        .WithMany("WFActivity")
                        .HasForeignKey("WFProcessTypeId");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityPermission", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFActivity", "Activity")
                        .WithMany("WFActivityPermission")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityScreenName", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFApplicationType", "ApplicationType")
                        .WithMany("WFActivityScreenName")
                        .HasForeignKey("ApplicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFActivityTransition", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFActivity", "ActivityIdFromNavigation")
                        .WithMany()
                        .HasForeignKey("ActivityIdFromNavigationId");

                    b.HasOne("Domain.Models.Workflow.WFActivity", "ActivityIdToNavigation")
                        .WithMany()
                        .HasForeignKey("ActivityIdToNavigationId");

                    b.HasOne("Domain.Models.Workflow.WFEvent", "TransitionEvent")
                        .WithMany("WFActivityTransition")
                        .HasForeignKey("TransitionEventId");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRule", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRuleClass", "Class")
                        .WithMany("WfbusinessRule")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFBusinessRuleSeverity", "Severity")
                        .WithMany("WfbusinessRule")
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleEvent", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRule", "BusinessRule")
                        .WithMany("WfbusinessRuleEvent")
                        .HasForeignKey("BusinessRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFEvent", "Event")
                        .WithMany("WfbusinessRuleEvent")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleMessage", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRule", "BusinessRule")
                        .WithMany("WfbusinessRuleMessage")
                        .HasForeignKey("BusinessRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfbusinessRuleMessage")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFBusinessRuleReviewMessage", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRuleMessage", "BusinessRuleMessage")
                        .WithMany("WfbusinessRuleReviewMessage")
                        .HasForeignKey("BusinessRuleMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEmailDefinition", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFEmailClass", "Class")
                        .WithMany("WfemailDefinition")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFEmailEvent", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFEvent", "Event")
                        .WithMany("WfemailEvent")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFEmailDefinition", "WfemailDefinition")
                        .WithMany("WfemailEvent")
                        .HasForeignKey("WfemailDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFLineBasedRuleMessage", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRule", "BusinessRule")
                        .WithMany("WflineBasedRuleMessage")
                        .HasForeignKey("BusinessRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WflineBasedRuleMessage")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessType", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFApplicationType", "ApplicationType")
                        .WithMany("WfprocessType")
                        .HasForeignKey("ApplicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFActivity", "EndActivity")
                        .WithMany()
                        .HasForeignKey("EndActivityId");

                    b.HasOne("Domain.Models.Workflow.WFActivity", "StartActivity")
                        .WithMany()
                        .HasForeignKey("StartActivityId");
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessTypeAutoListedBrule", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFBusinessRuleClass", "Class")
                        .WithMany("WfprocessTypeAutoListedBrule")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFProcessType", "ProcessType")
                        .WithMany("WfprocessTypeAutoListedBrule")
                        .HasForeignKey("ProcessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFProcessTypePreprocessor", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFPreprocessorClass", "Class")
                        .WithMany("WfprocessTypePreprocessor")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFProcessType", "ProcessType")
                        .WithMany("WfprocessTypePreprocessor")
                        .HasForeignKey("ProcessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItem", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFActivity", "Activity")
                        .WithMany("WfworkItem")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFProcessType", "ProcessType")
                        .WithMany("WfworkItem")
                        .HasForeignKey("ProcessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemAttachDocRevMessage", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItemAttachedDocument", "WorkItemAttachDocument")
                        .WithMany("WfworkItemAttachDocRevMessage")
                        .HasForeignKey("WorkItemAttachDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemAttachedDocument", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemAttachedDocument")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemLockTrail", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemLockTrail")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemLog", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemLog")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemTrail", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFActivityTransition", "ActivityTransition")
                        .WithMany("WfworkItemTrail")
                        .HasForeignKey("ActivityTransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemTrail")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemUploadTrail", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemUploadTrail")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Workflow.WFWorkItemVersionMap", b =>
                {
                    b.HasOne("Domain.Models.Workflow.WFWorkItem", "WorkItem")
                        .WithMany("WfworkItemVersionMap")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
